{
    "policy_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gAWVNwAAAAAAAACMHnN0YWJsZV9iYXNlbGluZXMzLnRkMy5wb2xpY2llc5SMEE11bHRpSW5wdXRQb2xpY3mUk5Qu",
        "__module__": "stable_baselines3.td3.policies",
        "__doc__": "\n    Policy class (with both actor and critic) for TD3 to be used with Dict observation spaces.\n\n    :param observation_space: Observation space\n    :param action_space: Action space\n    :param lr_schedule: Learning rate schedule (could be constant)\n    :param net_arch: The specification of the policy and value networks.\n    :param activation_fn: Activation function\n    :param features_extractor_class: Features extractor to use.\n    :param features_extractor_kwargs: Keyword arguments\n        to pass to the features extractor.\n    :param normalize_images: Whether to normalize images or not,\n         dividing by 255.0 (True by default)\n    :param optimizer_class: The optimizer to use,\n        ``th.optim.Adam`` by default\n    :param optimizer_kwargs: Additional keyword arguments,\n        excluding the learning rate, to pass to the optimizer\n    :param n_critics: Number of critic networks to create.\n    :param share_features_extractor: Whether to share or not the features extractor\n        between the actor and the critic (this saves computation time)\n    ",
        "__init__": "<function MultiInputPolicy.__init__ at 0x0000014894BACCA0>",
        "__abstractmethods__": "frozenset()",
        "_abc_impl": "<_abc._abc_data object at 0x0000014894BB1B40>"
    },
    "verbose": 1,
    "policy_kwargs": {
        "n_critics": 1
    },
    "observation_space": {
        ":type:": "<class 'gym.spaces.dict.Dict'>",
        ":serialized:": "gAWViwMAAAAAAACMD2d5bS5zcGFjZXMuZGljdJSMBERpY3SUk5QpgZR9lCiMBnNwYWNlc5SMC2NvbGxlY3Rpb25zlIwLT3JkZXJlZERpY3SUk5QpUpQojAxiYXR0ZXJ5X2NvbnSUjA5neW0uc3BhY2VzLmJveJSMA0JveJSTlCmBlH2UKIwFZHR5cGWUjAVudW1weZRoEJOUjAJmNJSJiIeUUpQoSwOMATyUTk5OSv////9K/////0sAdJRijAZfc2hhcGWUSwGFlIwDbG93lIwSbnVtcHkuY29yZS5udW1lcmljlIwLX2Zyb21idWZmZXKUk5QolgQAAAAAAAAAAAAAAJRoFUsBhZSMAUOUdJRSlIwEaGlnaJRoHSiWBAAAAAAAAAAAAPBAlGgVSwGFlGggdJRSlIwNYm91bmRlZF9iZWxvd5RoHSiWAQAAAAAAAAABlGgSjAJiMZSJiIeUUpQoSwOMAXyUTk5OSv////9K/////0sAdJRiSwGFlGggdJRSlIwNYm91bmRlZF9hYm92ZZRoHSiWAQAAAAAAAAABlGgsSwGFlGggdJRSlIwKX25wX3JhbmRvbZROdWKMBGxvYWSUaA0pgZR9lChoEGgVaBhoGWgaaB0olgQAAAAAAAAAAAAAAJRoFUsBhZRoIHSUUpRoI2gdKJYEAAAAAAAAAJHte0CUaBVLAYWUaCB0lFKUaChoHSiWAQAAAAAAAAABlGgsSwGFlGggdJRSlGgyaB0olgEAAAAAAAAAAZRoLEsBhZRoIHSUUpRoN051YowGcHZfZ2VulGgNKYGUfZQoaBBoFWgYaBloGmgdKJYEAAAAAAAAAAAAAACUaBVLAYWUaCB0lFKUaCNoHSiWBAAAAAAAAABsz0BAlGgVSwGFlGggdJRSlGgoaB0olgEAAAAAAAAAAZRoLEsBhZRoIHSUUpRoMmgdKJYBAAAAAAAAAAGUaCxLAYWUaCB0lFKUaDdOdWKMC3RpbWVfb2ZfZGF5lGgNKYGUfZQoaBBoFWgYSwKFlGgaaB0olggAAAAAAAAAAACAvwAAgL+UaBVLAoWUaCB0lFKUaCNoHSiWCAAAAAAAAAAAAIA/AACAP5RoFUsChZRoIHSUUpRoKGgdKJYCAAAAAAAAAAEBlGgsSwKFlGggdJRSlGgyaB0olgIAAAAAAAAAAQGUaCxLAoWUaCB0lFKUaDdOdWJ1aBhOaBBOaDdOdWIu",
        "spaces": "OrderedDict([('battery_cont', Box([0.], [7.5], (1,), float32)), ('load', Box([0.], [3.936], (1,), float32)), ('pv_gen', Box([0.], [3.013], (1,), float32)), ('time_of_day', Box([-1. -1.], [1. 1.], (2,), float32))])",
        "_shape": null,
        "dtype": null,
        "_np_random": null
    },
    "action_space": {
        ":type:": "<class 'gym.spaces.box.Box'>",
        ":serialized:": "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",
        "dtype": "float32",
        "_shape": [
            1
        ],
        "low": "[-1.]",
        "high": "[1.]",
        "bounded_below": "[ True]",
        "bounded_above": "[ True]",
        "_np_random": "RandomState(MT19937)"
    },
    "n_envs": 1,
    "num_timesteps": 8759,
    "_total_timesteps": 500,
    "_num_timesteps_at_start": 0,
    "seed": null,
    "action_noise": {
        ":type:": "<class 'stable_baselines3.common.noise.NormalActionNoise'>",
        ":serialized:": "gAWV6gAAAAAAAACMHnN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi5ub2lzZZSMEU5vcm1hbEFjdGlvbk5vaXNllJOUKYGUfZQojANfbXWUjBJudW1weS5jb3JlLm51bWVyaWOUjAtfZnJvbWJ1ZmZlcpSTlCiWCAAAAAAAAAAAAAAAAAAAAJSMBW51bXB5lIwFZHR5cGWUk5SMAmY4lImIh5RSlChLA4wBPJROTk5K/////0r/////SwB0lGJLAYWUjAFDlHSUUpSMBl9zaWdtYZRoCCiWCAAAAAAAAACamZmZmZm5P5RoD0sBhZRoE3SUUpR1Yi4=",
        "_mu": "[0.]",
        "_sigma": "[0.1]"
    },
    "start_time": 1672941510504938900,
    "learning_rate": 0.001,
    "tensorboard_log": null,
    "lr_schedule": {
        ":type:": "<class 'function'>",
        ":serialized:": "gAWVcQIAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwFLAEsASwFLAUsTQwSIAFMAlE6FlCmMAV+UhZSMP0M6XFB5dGhvbjM5XGxpYlxzaXRlLXBhY2thZ2VzXHN0YWJsZV9iYXNlbGluZXMzXGNvbW1vblx1dGlscy5weZSMBGZ1bmOUS4BDAgABlIwDdmFslIWUKXSUUpR9lCiMC19fcGFja2FnZV9flIwYc3RhYmxlX2Jhc2VsaW5lczMuY29tbW9ulIwIX19uYW1lX1+UjB5zdGFibGVfYmFzZWxpbmVzMy5jb21tb24udXRpbHOUjAhfX2ZpbGVfX5RoDHVOTmgAjBBfbWFrZV9lbXB0eV9jZWxslJOUKVKUhZR0lFKUjBxjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZV9mYXN0lIwSX2Z1bmN0aW9uX3NldHN0YXRllJOUaB59lH2UKGgWaA2MDF9fcXVhbG5hbWVfX5SMGWNvbnN0YW50X2ZuLjxsb2NhbHM+LmZ1bmOUjA9fX2Fubm90YXRpb25zX1+UfZSMDl9fa3dkZWZhdWx0c19flE6MDF9fZGVmYXVsdHNfX5ROjApfX21vZHVsZV9flGgXjAdfX2RvY19flE6MC19fY2xvc3VyZV9flGgAjApfbWFrZV9jZWxslJOURz9QYk3S8an8hZRSlIWUjBdfY2xvdWRwaWNrbGVfc3VibW9kdWxlc5RdlIwLX19nbG9iYWxzX1+UfZR1hpSGUjAu"
    },
    "_last_obs": {
        ":type:": "<class 'collections.OrderedDict'>",
        ":serialized:": "gAWVKgEAAAAAAACMC2NvbGxlY3Rpb25zlIwLT3JkZXJlZERpY3SUk5QpUpQojAxiYXR0ZXJ5X2NvbnSUjBJudW1weS5jb3JlLm51bWVyaWOUjAtfZnJvbWJ1ZmZlcpSTlCiWBAAAAAAAAAAAAAAAlIwFbnVtcHmUjAVkdHlwZZSTlIwCZjSUiYiHlFKUKEsDjAE8lE5OTkr/////Sv////9LAHSUYksBSwGGlIwBQ5R0lFKUjARsb2FklGgHKJYEAAAAAAAAAOFAND+UaA5LAUsBhpRoEnSUUpSMBnB2X2dlbpRoByiWBAAAAAAAAAAAAAAAlGgOSwFLAYaUaBJ0lFKUjAt0aW1lX29mX2RheZRoByiWCAAAAAAAAAAAAIA/AAAAAJRoDksBSwKGlGgSdJRSlHUu",
        "battery_cont": "[[0.]]",
        "load": "[[0.704]]",
        "pv_gen": "[[0.]]",
        "time_of_day": "[[1. 0.]]"
    },
    "_last_episode_starts": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": "gAWVdAAAAAAAAACMEm51bXB5LmNvcmUubnVtZXJpY5SMC19mcm9tYnVmZmVylJOUKJYBAAAAAAAAAAGUjAVudW1weZSMBWR0eXBllJOUjAJiMZSJiIeUUpQoSwOMAXyUTk5OSv////9K/////0sAdJRiSwGFlIwBQ5R0lFKULg=="
    },
    "_last_original_obs": {
        ":type:": "<class 'collections.OrderedDict'>",
        ":serialized:": "gAWVKgEAAAAAAACMC2NvbGxlY3Rpb25zlIwLT3JkZXJlZERpY3SUk5QpUpQojAxiYXR0ZXJ5X2NvbnSUjBJudW1weS5jb3JlLm51bWVyaWOUjAtfZnJvbWJ1ZmZlcpSTlCiWBAAAAAAAAADf/+9AlIwFbnVtcHmUjAVkdHlwZZSTlIwCZjSUiYiHlFKUKEsDjAE8lE5OTkr/////Sv////9LAHSUYksBSwGGlIwBQ5R0lFKUjARsb2FklGgHKJYEAAAAAAAAAAaBmT+UaA5LAUsBhpRoEnSUUpSMBnB2X2dlbpRoByiWBAAAAAAAAAAAAAAAlGgOSwFLAYaUaBJ0lFKUjAt0aW1lX29mX2RheZRoByiWCAAAAAAAAADXs10/AAAAv5RoDksBSwKGlGgSdJRSlHUu",
        "battery_cont": "[[7.5]]",
        "load": "[[1.199]]",
        "pv_gen": "[[0.]]",
        "time_of_day": "[[ 0.866 -0.5  ]]"
    },
    "_episode_num": 1,
    "use_sde": false,
    "sde_sample_freq": -1,
    "_current_progress_remaining": -16.518,
    "ep_info_buffer": {
        ":type:": "<class 'collections.deque'>",
        ":serialized:": "gAWVRgAAAAAAAACMC2NvbGxlY3Rpb25zlIwFZGVxdWWUk5QpS2SGlFKUfZQojAFylEfApQLivaDf34wBbJRNNyKMAXSUR0Ab2h/RVp9JdWEu"
    },
    "ep_success_buffer": {
        ":type:": "<class 'collections.deque'>",
        ":serialized:": "gAWVIAAAAAAAAACMC2NvbGxlY3Rpb25zlIwFZGVxdWWUk5QpS2SGlFKULg=="
    },
    "_n_updates": 8759,
    "buffer_size": 1000000,
    "batch_size": 100,
    "learning_starts": 100,
    "tau": 0.005,
    "gamma": 0.99,
    "gradient_steps": -1,
    "optimize_memory_usage": false,
    "replay_buffer_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gAWVOQAAAAAAAACMIHN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi5idWZmZXJzlIwQRGljdFJlcGxheUJ1ZmZlcpSTlC4=",
        "__module__": "stable_baselines3.common.buffers",
        "__doc__": "\n    Dict Replay buffer used in off-policy algorithms like SAC/TD3.\n    Extends the ReplayBuffer to use dictionary observations\n\n    :param buffer_size: Max number of element in the buffer\n    :param observation_space: Observation space\n    :param action_space: Action space\n    :param device: PyTorch device\n    :param n_envs: Number of parallel environments\n    :param optimize_memory_usage: Enable a memory efficient variant\n        Disabled for now (see https://github.com/DLR-RM/stable-baselines3/pull/243#discussion_r531535702)\n    :param handle_timeout_termination: Handle timeout termination (due to timelimit)\n        separately and treat the task as infinite horizon task.\n        https://github.com/DLR-RM/stable-baselines3/issues/284\n    ",
        "__init__": "<function DictReplayBuffer.__init__ at 0x0000014894BA8670>",
        "add": "<function DictReplayBuffer.add at 0x0000014894BA8700>",
        "sample": "<function DictReplayBuffer.sample at 0x0000014894BA8790>",
        "_get_samples": "<function DictReplayBuffer._get_samples at 0x0000014894BA8820>",
        "__abstractmethods__": "frozenset()",
        "_abc_impl": "<_abc._abc_data object at 0x0000014894BA7940>"
    },
    "replay_buffer_kwargs": {},
    "train_freq": {
        ":type:": "<class 'stable_baselines3.common.type_aliases.TrainFreq'>",
        ":serialized:": "gAWVZAAAAAAAAACMJXN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi50eXBlX2FsaWFzZXOUjAlUcmFpbkZyZXGUk5RLAWgAjBJUcmFpbkZyZXF1ZW5jeVVuaXSUk5SMB2VwaXNvZGWUhZRSlIaUgZQu"
    },
    "use_sde_at_warmup": false,
    "policy_delay": 1,
    "target_noise_clip": 0.0,
    "target_policy_noise": 0.1,
    "actor_batch_norm_stats": [],
    "critic_batch_norm_stats": [],
    "actor_batch_norm_stats_target": [],
    "critic_batch_norm_stats_target": []
}